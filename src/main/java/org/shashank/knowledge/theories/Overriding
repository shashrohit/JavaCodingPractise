Rule #1: Only inherited methods can be overridden.
Rule #2: Final and static methods cannot be overridden.
Rule #3: The overriding method must have same argument list otherwise it
becomes overloading.
Rule #4: The overriding method must have same return type (or subtype).
Rule #5: The overriding method must not have more restrictive access modifier.
(Private, default, protected, public)
Rule #6: The overriding method must not throw new or broader checked exceptions.
It can throw any unchecked exceptions

Allowed -
    protected void move() throws IOException
    protected void move() throws FileNotFoundException

Rule #7: Use the super keyword to invoke the overridden method from a subclass.
 protected void move() {
        super.move();
 }

Rule #8: Constructors cannot be overridden.
Rule #9: Abstract methods must be overridden by the first non-abstract subclass.
Rule #10: A static method in a subclass may "hide" another static one in a superclass.
(can not use @override)
Rule #11: The synchronized modifier has no effect on the rules of overriding.
