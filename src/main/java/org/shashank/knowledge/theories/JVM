https://www.geeksforgeeks.org/jvm-works-jvm-architecture/

When we compile a .java file, .class files (contains byte-code) with the
same class names present in .java file are generated by the Java compiler.
This .class file goes into various steps of JVM when we run it.

JVM Parts -

1. Class Loader -
Loads the class in Method area then creates an object of type Class to
represent this file in the heap area. Class file is verified and all static
variables are assigned with their values.

2. JVM Memory -
Method area: In the method area, all class level information like class name,
immediate parent class name, methods and variables information etc. are stored.

Heap area: Information of all objects is stored in the heap area, including static
variables.

Stack area: For every thread, JVM creates one run-time stack which is stored here.
Every block of this stack is called stack frame which stores methods calls.
All local variables of that method are stored in their corresponding frame.
After a thread terminates, its run-time stack will be destroyed by JVM.

PC Registers: Store address of current execution instruction of a thread.

3. Execution Engine -
Execution engine executes the “.class” (bytecode). It reads the byte-code line by line.
It can be classified into three parts -

a) Interpreter: It interprets the bytecode line by line and then executes. The
disadvantage here is that when one method is called multiple times, every time
interpretation is required.

b) Just-In-Time Compiler(JIT) : It is used to increase the efficiency of an interpreter.
It compiles the entire bytecode and changes it to native code so whenever the
interpreter sees repeated method calls, JIT provides direct native code for that part
so re-interpretation is not required, thus efficiency is improved.

c) Garbage Collector

4. Java Native Interface (JNI) -
It is an interface that interacts with the Native Method Libraries and provides
the native libraries(C, C++) required for the execution. It enables JVM to call
C/C++ libraries and to be called by C/C++ libraries which may be specific to hardware.

5. Native Method Libraries -
It is a collection of the Native Libraries(C, C++) which are required by the
Execution Engine.
